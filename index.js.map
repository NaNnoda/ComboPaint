{
  "version": 3,
  "sources": ["src/OffScreenCanvasWrapper.ts", "src/OffScreenCanvasWrapper2D.ts", "src/Layers/CPLayer.ts", "src/Layers/NullLayer.ts", "src/Document/ComboPaintDocument.ts", "src/CanvasWrapper.ts", "src/MathUtils/Vec2.ts", "src/Events/EventHandler.ts", "src/Events/PointerEventHandler.ts", "src/Events/PaintToolEventHandler.ts", "src/Events/ViewerEventsHandler.ts", "src/Layers/BackgroundLayer.ts", "src/DocViewer.ts", "src/GlobalValues.ts", "src/PaintTools/PaintTool.ts", "src/PaintTools/PaintTool2D.ts", "src/PaintTools/BasicPen.ts", "src/Main.ts"],
  "sourcesContent": ["export class OffScreenCanvasWrapper {\r\n    _canvas: OffscreenCanvas;\r\n    _ctx: OffscreenRenderingContext;\r\n\r\n    constructor(width: number, height: number, ctxId: OffscreenRenderingContextId) {\r\n        this._canvas = new OffscreenCanvas(width, height);\r\n        this._ctx = this._canvas.getContext(ctxId) as OffscreenRenderingContext;\r\n        if (!this._ctx) {\r\n            throw new Error(`Failed to get context ${ctxId}`);\r\n        }\r\n    }\r\n    get width() {\r\n        return this.canvas.width;\r\n    }\r\n    set width(width: number) {\r\n        this.canvas.width = width;\r\n    }\r\n\r\n    get height() {\r\n        return this.canvas.height;\r\n    }\r\n    set height(height: number) {\r\n        this.canvas.height = height;\r\n    }\r\n\r\n    get canvas() {\r\n        return this._canvas;\r\n    }\r\n\r\n    get ctx() {\r\n        return this._ctx;\r\n    }\r\n}\r\n", "import {OffScreenCanvasWrapper} from \"./OffScreenCanvasWrapper\";\r\n\r\nexport class OffScreenCanvasWrapper2D extends OffScreenCanvasWrapper {\r\n    // _imageData: ImageData;\r\n    // _data: Uint8ClampedArray;\r\n    // _data32: Uint32Array;\r\n    // _data8: Uint8ClampedArray;\r\n\r\n    constructor(width: number, height: number) {\r\n        super(width, height, \"2d\");\r\n        // this._imageData = this.ctx.getImageData(0, 0, width, height);\r\n        // this._data = this._imageData.data;\r\n        // this._data32 = new Uint32Array(this._data.buffer);\r\n        // this._data8 = new Uint8ClampedArray(this._data.buffer);\r\n    }\r\n\r\n    get ctx(): OffscreenCanvasRenderingContext2D {\r\n        return this._ctx as OffscreenCanvasRenderingContext2D;\r\n    }\r\n\r\n    resize(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        // this._imageData = this.ctx.getImageData(0, 0, width, height);\r\n        // this._data = this._imageData.data;\r\n        // this._data32 = new Uint32Array(this._data.buffer);\r\n        // this._data8 = new Uint8ClampedArray(this._data.buffer);\r\n    }\r\n\r\n    clear() {\r\n        this.ctx.clearRect(0, 0, this.width, this.height);\r\n        return this;\r\n    }\r\n\r\n    fill(color: string) {\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n        return this;\r\n    }\r\n}\r\n", "import {CanvasWrapper} from \"../CanvasWrapper\";\r\nimport {OffScreenCanvasWrapper2D} from \"../OffScreenCanvasWrapper2D\";\r\n\r\nexport class CPLayer extends OffScreenCanvasWrapper2D {\r\n    name: string;\r\n    visible: boolean;\r\n    opacity: number;\r\n    blendMode: GlobalCompositeOperation;\r\n\r\n    constructor(width: number, height: number, name: string = \"New Layer\") {\r\n        super(width, height);\r\n        this.width = width;\r\n        this.height = height;\r\n        this.name = name;\r\n        this.visible = true;\r\n        this.opacity = 1;\r\n        // this.blendMode = \"normal\";\r\n        this.blendMode = \"source-over\";\r\n    }\r\n\r\n    render() {\r\n\r\n    }\r\n}\r\n", "import {CPLayer} from \"./CPLayer\";\r\n\r\nexport class NullLayer extends CPLayer {\r\n    private static instance: NullLayer | null = null;\r\n\r\n    public static getInstance(): NullLayer {\r\n        if (!NullLayer.instance) {\r\n            NullLayer.instance = new NullLayer(1,1, \"Null Layer\");\r\n        }\r\n        return NullLayer.instance;\r\n    }\r\n}\r\n\r\n\r\nexport const nullLayer = NullLayer.getInstance();\r\n", "import {CanvasWrapper} from \"../CanvasWrapper\";\r\nimport {CPLayer} from \"../Layers/CPLayer\";\r\nimport {BackgroundLayer} from \"../Layers/BackgroundLayer\";\r\nimport {OffScreenCanvasWrapper2D} from \"../OffScreenCanvasWrapper2D\";\r\nimport {nullLayer} from \"../Layers/NullLayer\";\r\n\r\nexport default class ComboPaintDocument extends OffScreenCanvasWrapper2D {\r\n    layers: CPLayer[] = [];\r\n    selectedLayer: CPLayer = nullLayer;\r\n\r\n    get height() {\r\n        return this.canvas.height;\r\n    }\r\n\r\n    set height(height: number) {\r\n        this.canvas.height = height;\r\n    }\r\n\r\n    get width() {\r\n        return this.canvas.width;\r\n    }\r\n\r\n    set width(width: number) {\r\n        this.canvas.width = width;\r\n    }\r\n\r\n    constructor(size: [number, number], layers: CPLayer[] = []) {\r\n        super(size[0], size[1]);\r\n\r\n        this.addLayers(...layers);\r\n        // this.background = new BackgroundLayer(width, height, \"checkerboard\");\r\n    }\r\n\r\n    addLayer(layer: CPLayer, index: number = this.layers.length) {\r\n        this.layers.splice(index, 0, layer);\r\n        if (this.selectedLayer == nullLayer) {\r\n            this.selectedLayer = layer;\r\n        }\r\n    }\r\n\r\n    addLayers(...layers: CPLayer[]) {\r\n        for (let layer of layers) {\r\n            this.addLayer(layer);\r\n        }\r\n        if (this.selectedLayer == null && layers.length > 0) {\r\n            this.selectedLayer = layers[0];\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // this.drawLayer(this.background);\r\n        this.clear();\r\n\r\n        for (let layer of this.layers) {\r\n            if (layer.visible) {\r\n                this.drawLayer(layer);\r\n            }\r\n        }\r\n    }\r\n\r\n    drawLayer(layer: CPLayer) {\r\n        this.ctx.globalAlpha = layer.opacity;\r\n        this.ctx.globalCompositeOperation = layer.blendMode;\r\n        layer.render();\r\n        this.ctx.drawImage(layer.canvas, 0, 0);\r\n    }\r\n\r\n}\r\n\r\n", "export class CanvasWrapper {\r\n    canvas: HTMLCanvasElement = document.createElement(\"canvas\");// place the canvas in the DOM\r\n    private _actualCtx: CanvasRenderingContext2D | WebGLRenderingContext | null = null// place the canvas in the DOM\r\n    private _is2d: boolean = false;\r\n    private _isGl: boolean = false;\r\n\r\n    constructor( canvas: HTMLCanvasElement | string | null = null, ctxId: string = \"2d\",) {\r\n        this.setCanvas(canvas, ctxId);\r\n    }\r\n\r\n    setCanvas(canvas: HTMLCanvasElement | string | null = null, ctxId: string = \"2d\") {\r\n        if (typeof canvas === \"string\") {\r\n            canvas = document.getElementById(canvas) as HTMLCanvasElement;\r\n            if (!canvas) {\r\n                throw new Error(\"Failed to get canvas\");\r\n            }\r\n        } else if (canvas === null) {\r\n            canvas = document.createElement(\"canvas\");\r\n        }\r\n        this.canvas = canvas;\r\n        this.setCtx(ctxId);\r\n    }\r\n\r\n    get ctx() {\r\n        if (this._is2d) {\r\n            // console.log( this._actualCtx);\r\n            return this._actualCtx as CanvasRenderingContext2D;\r\n        }\r\n        throw new Error(\"Context is not 2d\");\r\n    }\r\n    set ctx(ctx: CanvasRenderingContext2D ) {\r\n        console.log(\"You should not be setting the context\");\r\n    }\r\n\r\n    get gl() {\r\n        if (this._isGl) {\r\n            return this._actualCtx as WebGLRenderingContext;\r\n        }\r\n        throw new Error(\"Context is not WebGL\");\r\n    }\r\n\r\n    setCtx(ctxId: string) {\r\n        this._actualCtx = this.canvas.getContext(ctxId) as CanvasRenderingContext2D | WebGLRenderingContext;\r\n        if (this._actualCtx === null) {\r\n            throw new Error(`Failed to get context [${ctxId}]`);\r\n        }\r\n        if (ctxId === \"2d\") {\r\n            this._is2d = true;\r\n        }\r\n        if (ctxId === \"webgl\") {\r\n            this._isGl = true;\r\n        }\r\n    }\r\n\r\n    set width(width: number) {\r\n        this.canvas.width = width;\r\n    }\r\n\r\n    set height(height: number) {\r\n        this.canvas.height = height;\r\n    }\r\n\r\n    get width() {\r\n        return this.canvas.width;\r\n    }\r\n\r\n    get height() {\r\n        return this.canvas.height;\r\n    }\r\n}", "export class Vec2 {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor(val1: number, val2: number | undefined = undefined) {\r\n        this.x = val1;\r\n        if (val2 === undefined) {\r\n            this.y = val1;\r\n        } else {\r\n            this.y = val2;\r\n        }\r\n    }\r\n    addXY(x: number, y: number) {\r\n        return new Vec2(this.x + x, this.y + y);\r\n    }\r\n    add(other: Vec2) {\r\n        this.addXY(other.x, other.y);\r\n    }\r\n\r\n\r\n    sub(other: Vec2) {\r\n        return new Vec2(this.x - other.x, this.y - other.y);\r\n    }\r\n\r\n    mul(other: Vec2) {\r\n        return new Vec2(this.x * other.x, this.y * other.y);\r\n    }\r\n\r\n    div(other: Vec2) {\r\n        return new Vec2(this.x / other.x, this.y / other.y);\r\n    }\r\n\r\n    scale(scalar: number) {\r\n        return new Vec2(this.x * scalar, this.y * scalar);\r\n    }\r\n\r\n    dot(other: Vec2) {\r\n        return this.x * other.x + this.y * other.y;\r\n    }\r\n\r\n    length() {\r\n        return Math.sqrt(this.dot(this));\r\n    }\r\n\r\n    normalize() {\r\n        return this.scale(1 / this.length());\r\n    }\r\n\r\n    rotate(angle: number) {\r\n        let cos = Math.cos(angle);\r\n        let sin = Math.sin(angle);\r\n        return new Vec2(this.x * cos - this.y * sin, this.x * sin + this.y * cos);\r\n    }\r\n\r\n    angle() {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    angleTo(other: Vec2) {\r\n        return other.angle() - this.angle();\r\n    }\r\n}\r\n", "export default class EventHandler<Keys extends string> {\r\n    events: { [key: string]: Function[] } = {};\r\n\r\n    registerEvent(event: Keys, callback: Function) {\r\n        if (this.events[event] === undefined) {\r\n            this.events[event] = [];\r\n        }\r\n        this.events[event].push(callback);\r\n    }\r\n\r\n    triggerEvent(event: Keys, ...args: any[]) {\r\n        if (this.events[event] !== undefined) {\r\n            for (let callback of this.events[event]) {\r\n                callback(...args);\r\n            }\r\n        }\r\n    }\r\n\r\n    removeEvent(event: Keys) {\r\n        delete this.events[event];\r\n    }\r\n\r\n    removeCallback(event: Keys, callback: Function) {\r\n        if (this.events[event] !== undefined) {\r\n            this.events[event] = this.events[event].filter((value) => {\r\n                return value !== callback;\r\n            });\r\n        }\r\n    }\r\n\r\n    removeAllEvents() {\r\n        this.events = {};\r\n    }\r\n\r\n}", "import EventHandler from \"./EventHandler\";\r\nimport {Vec2} from \"../MathUtils/Vec2\";\r\n\r\nexport type PointerEventKeys = \"raw\" | \"down\" | \"up\" | \"move\" | \"leave\" | \"enter\" | \"pressedMove\" | \"last\";\r\n\r\nexport class PointerPoint {\r\n    pos: Vec2;\r\n    pressure: number;\r\n\r\n    constructor(pos: Vec2, pressure: number) {\r\n        this.pos = pos;\r\n        this.pressure = pressure;\r\n    }\r\n\r\n    static pointerEventToPointerPoint(e: PointerEvent): PointerPoint {\r\n        return new PointerPoint(new Vec2(e.offsetX, e.offsetY), e.pressure);\r\n    }\r\n\r\n    get x() {\r\n        return this.pos.x;\r\n    }\r\n\r\n    get y() {\r\n        return this.pos.y;\r\n    }\r\n}\r\n\r\nexport class PointerEventHandler extends EventHandler<PointerEventKeys> {\r\n    constructor() {\r\n        super();\r\n        console.log(\"PointerEventHandler created\");\r\n        this.registerEvent(\"raw\", this.onRaw.bind(this));\r\n    }\r\n\r\n    static createFromHTMLElement(element: HTMLElement) {\r\n        let handler = new PointerEventHandler();\r\n        PointerEventHandler.bindWithElement(handler, element);\r\n        return handler;\r\n    }\r\n\r\n    static bindWithElement(handler: PointerEventHandler, element: HTMLElement) {\r\n        element.addEventListener(\"pointerdown\", handler.rawPointerEvent.bind(handler));\r\n        element.addEventListener(\"pointerup\", handler.rawPointerEvent.bind(handler));\r\n        element.addEventListener(\"pointermove\", handler.rawPointerEvent.bind(handler));\r\n        element.addEventListener(\"pointerenter\", handler.rawPointerEvent.bind(handler));\r\n        element.addEventListener(\"pointerleave\", handler.rawPointerEvent.bind(handler));\r\n        element.addEventListener(\"pointerover\", handler.rawPointerEvent.bind(handler));\r\n        element.addEventListener(\"pointerout\", handler.rawPointerEvent.bind(handler));\r\n        element.addEventListener(\"pointercancel\", handler.rawPointerEvent.bind(handler));\r\n    }\r\n\r\n    wasDown: boolean = false;\r\n    lastPoint: PointerPoint | null = null;\r\n\r\n    rawPointerEvent(rawEvent: PointerEvent) {\r\n        this.triggerEvent(\"raw\", rawEvent);\r\n    }\r\n\r\n    onRaw(rawEvent: PointerEvent, customPos: Vec2|null = null) {\r\n        let point = PointerPoint.pointerEventToPointerPoint(rawEvent);\r\n        if (customPos !== null) {\r\n            point.pos = customPos;\r\n        }\r\n\r\n        switch (rawEvent.type) {\r\n            case \"pointerdown\":\r\n                this.triggerEvent(\"down\", point);\r\n                this.wasDown = true;\r\n                break;\r\n            case \"pointerup\":\r\n                this.triggerEvent(\"up\", point);\r\n                this.wasDown = false;\r\n                break;\r\n            case \"pointermove\":\r\n                this.triggerEvent(\"move\", point);\r\n                if (this.wasDown) {\r\n                    this.triggerEvent(\"pressedMove\", point);\r\n                }\r\n                break;\r\n            case \"pointerenter\":\r\n                this.triggerEvent(\"enter\", point);\r\n                break;\r\n            case \"pointerleave\":\r\n                this.triggerEvent(\"leave\", point);\r\n                this.wasDown = false;\r\n                break;\r\n        }\r\n        this.lastPoint = point;\r\n    }\r\n}\r\n\r\nclass PointerHandlerState {\r\n    wasDown: boolean = false;\r\n    isDown: boolean = false;\r\n\r\n    lastPressure: number = 0;\r\n}\r\n", "import {PointerEventHandler, PointerPoint} from \"./PointerEventHandler\";\r\nimport {PaintTool} from \"../PaintTools/PaintTool\";\r\n\r\nexport class PaintToolEventHandler extends PointerEventHandler {\r\n    _tool: PaintTool | null = null;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get tool() {\r\n        if (this._tool === null) {\r\n            throw new Error(\"Tool not set\");\r\n        }\r\n        return this._tool;\r\n    }\r\n    set tool(tool: PaintTool) {\r\n        this._tool = tool;\r\n    }\r\n\r\n    bind(tool: PaintTool) {\r\n        this.tool = tool;\r\n        this.registerEvent(\"down\", this.onDown.bind(this));\r\n        this.registerEvent(\"up\", this.onUp.bind(this));\r\n        this.registerEvent(\"pressedMove\", this.onPressedMove.bind(this));\r\n        this.registerEvent(\"move\", this.onMove.bind(this));\r\n    }\r\n\r\n    onDown(point: PointerPoint) {\r\n        this.tool.onDown(point);\r\n    }\r\n\r\n    onUp(point: PointerPoint) {\r\n        this.tool.onUp(point);\r\n    }\r\n\r\n    onPressedMove(point: PointerPoint) {\r\n        this.tool.onPressedMove(point);\r\n    }\r\n\r\n    onMove(point: PointerPoint) {\r\n        this.tool.onMove(point);\r\n    }\r\n}\r\n", "import EventHandler from \"./EventHandler\";\r\nimport {PointerEventHandler} from \"./PointerEventHandler\";\r\nimport {DocViewer} from \"../DocViewer\";\r\n\r\nexport type WheelEventKeys = \"midDrag\" | \"wheel\" | \"rawPointer\";\r\n\r\nexport class ViewerEventsHandler extends EventHandler<WheelEventKeys> {\r\n    lastMousePoint: MouseEvent | null = null;\r\n    lastPointerPoint: PointerEvent | null = null;\r\n    isMidDragging: boolean = false;\r\n\r\n    pointerEvent: PointerEventHandler;\r\n\r\n    viewer: DocViewer;\r\n\r\n    constructor(viewer: DocViewer) {\r\n        super();\r\n        this.registerEvent(\"midDrag\", this.onMidDrag.bind(this));\r\n        this.registerEvent(\"wheel\", this.onWheel.bind(this));\r\n        let canvas = viewer.canvas;\r\n        canvas.addEventListener(\"wheel\", (e) => {\r\n            this.triggerEvent(\"wheel\", e);\r\n        });\r\n        canvas.addEventListener(\"mousedown\", (e) => {\r\n            if (e.button === 1) {\r\n                this.isMidDragging = true;\r\n                this.lastMousePoint = e;\r\n            }\r\n        });\r\n        canvas.addEventListener(\"mouseup\", (e) => {\r\n            if (e.button === 1) {\r\n                this.isMidDragging = false;\r\n            }\r\n            this.lastMousePoint = null;\r\n        });\r\n        canvas.addEventListener(\"mousemove\", (e) => {\r\n            // console.log({x: e.offsetX, y: e.offsetY});\r\n            if (this.isMidDragging) {\r\n                this.triggerEvent(\"midDrag\", e);\r\n            }\r\n            this.lastMousePoint = e;\r\n        });\r\n        this.pointerEvent = PointerEventHandler.createFromHTMLElement(canvas);\r\n        this.pointerEvent.registerEvent(\"raw\", this.onRawPointer.bind(this));\r\n\r\n        this.viewer = viewer;\r\n    }\r\n\r\n    onRawPointer(e: PointerEvent) {\r\n        this.lastPointerPoint = e;\r\n        // console.log(\"raw pointer\");\r\n\r\n        let pos = this.viewer.viewToDocCoords(e.offsetX, e.offsetY);\r\n\r\n        if (e.button  !== 1) {\r\n            this.viewer.paintToolEventHandler.triggerEvent(\"raw\", e, pos);\r\n        }\r\n    }\r\n\r\n    onMidDrag(e: MouseEvent) {\r\n        // console.log(\"mid drag\");\r\n    }\r\n\r\n    onWheel(e: WheelEvent) {\r\n        // console.log(\"wheel\");\r\n    }\r\n}\r\n", "import {CPLayer} from \"./CPLayer\";\r\n\r\ntype backgroundStyle = string | CanvasGradient | CanvasPattern | \"checkerboard\" | \"solid\" | \"image\";\r\n\r\nexport class BackgroundLayer extends CPLayer {\r\n    fillStyle: backgroundStyle;\r\n\r\n    constructor(width: number, height: number, fillStyle: string = \"checkerboard\") {\r\n        super(width, height, \"Background\");\r\n        this.fillStyle = fillStyle;\r\n        this.render();\r\n    }\r\n    drawCheckerboard(color1: string, color2: string, size: number) {\r\n        this.ctx.fillStyle = color1;\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n        this.ctx.fillStyle = color2;\r\n        for (let x = 0; x < this.width; x += size) {\r\n            for (let y = 0; y < this.height; y += size) {\r\n                if ((x / size) % 2 == (y / size) % 2) {\r\n                    this.ctx.fillRect(x, y, size, size);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.fillStyle == \"checkerboard\") {\r\n            // console.log(\"checkerboard\");\r\n            this.drawCheckerboard(\"#ffffff\", \"#cbcbcb\", 10);\r\n        } else {\r\n            this.ctx.fillStyle = this.fillStyle;\r\n            this.ctx.fillRect(0, 0, this.width, this.height);\r\n        }\r\n    }\r\n}\r\n", "import ComboPaintDocument from \"./Document/ComboPaintDocument\";\r\nimport {CanvasWrapper} from \"./CanvasWrapper\";\r\nimport {Vec2} from \"./MathUtils/Vec2\";\r\nimport {PaintToolEventHandler} from \"./Events/PaintToolEventHandler\";\r\nimport {ViewerEventsHandler} from \"./Events/ViewerEventsHandler\";\r\nimport {BackgroundLayer} from \"./Layers/BackgroundLayer\";\r\nimport {GlobalValues} from \"./GlobalValues\";\r\nimport {CPLayer} from \"./Layers/CPLayer\";\r\nimport {nullLayer, NullLayer} from \"./Layers/NullLayer\";\r\n\r\n/**\r\n * Class that renders a ComboPaintDocument to a canvas.\r\n * and also handles user input.\r\n */\r\nexport class DocViewer extends CanvasWrapper {\r\n    // _doc: ComboPaintDocument;\r\n\r\n    _state: TranslateState;\r\n\r\n    paintToolEventHandler: PaintToolEventHandler;\r\n    events: ViewerEventsHandler;\r\n\r\n    background: CPLayer = NullLayer.getInstance();\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        super(canvas);\r\n\r\n\r\n        this.paintToolEventHandler = new PaintToolEventHandler();\r\n        this.events = new ViewerEventsHandler(this);\r\n\r\n        this.setUpEventHandlers();\r\n\r\n        this._state = new TranslateState();\r\n\r\n        if (this.doc) {\r\n            console.log(\"Doc is not null\");\r\n            console.log(this.doc);\r\n            this.viewDoc(this.doc);\r\n        }\r\n    }\r\n\r\n    viewDoc(doc: ComboPaintDocument) {\r\n        this._state = new TranslateState();\r\n        let offset = new Vec2(0, 0);\r\n        let scale = 3;\r\n        offset.x = (this.width) / 2 - doc.width / 2 * scale;\r\n        offset.y = (this.height) / 2 - doc.height / 2 * scale;\r\n        this.state.offset = offset;\r\n        this.state.scale = new Vec2(scale);\r\n        console.log(\"setting background\");\r\n        this.background = new BackgroundLayer(doc.width, doc.height);\r\n    }\r\n\r\n    setUpEventHandlers() {\r\n        this.events.registerEvent(\"midDrag\", (e: PointerEvent) => {\r\n            let offset = this.state.offset;\r\n            let lastE = this.events.lastMousePoint;\r\n            if (lastE === null) {\r\n                return;\r\n            }\r\n            let dx = e.clientX - lastE.clientX;\r\n            let dy = e.clientY - lastE.clientY;\r\n            console.log({dx, dy});\r\n            this.state.offset = offset.addXY(dx, dy);\r\n            this.render();\r\n        });\r\n        this.events.registerEvent(\"wheel\", (e: WheelEvent) => {\r\n            // e.preventDefault();\r\n            // console.log(\"Wheel\");\r\n            // console.log(e.deltaY);\r\n            let isTouchPad = e.deltaMode === 1;\r\n            console.log(e.deltaMode);\r\n            if (isTouchPad) {\r\n                this.offsetCanvas(0, e.deltaY);\r\n                this.offsetCanvas(e.deltaX, 0);\r\n                return;\r\n            }\r\n            console.log(\"not touchpad\");\r\n            this.zoomRelativeToMouse(1 - e.deltaY / 1000);\r\n            console.log(this.state.scale);\r\n            this.render();\r\n        });\r\n    }\r\n\r\n    render() {\r\n        console.log(\"Rendering\");\r\n        this.ctx.fillStyle = \"#cfcfcf\";\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n        // this.renderBorder();\r\n        this.renderBackground();\r\n        this.renderDoc();\r\n        this.renderForeground();\r\n    }\r\n\r\n    get state() {\r\n        return this._state;\r\n    }\r\n\r\n    get doc() {\r\n        return GlobalValues.currDoc;\r\n    }\r\n\r\n    viewToDocCoords(x: number, y: number) {\r\n        return new Vec2(\r\n            (x - this.state.offset.x) / this.state.scale.x,\r\n            (y - this.state.offset.y) / this.state.scale.y\r\n        );\r\n    }\r\n\r\n    zoomRelativeToMouse(zoom: number) {\r\n        if (this.events.lastPointerPoint === null) {\r\n            return;\r\n        }\r\n        let x = this.events.lastPointerPoint.x;\r\n        let y = this.events.lastPointerPoint.y;\r\n        this.relativeZoom(x, y, zoom);\r\n    }\r\n\r\n    offsetCanvas(x: number, y: number) {\r\n        this.state.offset = this.state.offset.addXY(x, y);\r\n    }\r\n\r\n    relativeZoom(x: number, y: number, zoom: number) {\r\n        if (this.state.scale.x > 100) {\r\n            if (zoom > 1) {\r\n                // console.log(\"Too big\");\r\n                return;\r\n            }\r\n        }\r\n        let oldScale = this.state.scale;\r\n        let newScale = new Vec2(oldScale.x * zoom, oldScale.y * zoom);\r\n        let oldOffset = this.state.offset;\r\n        let newOffset = new Vec2(\r\n            oldOffset.x + (x - oldOffset.x) * (1 - zoom),\r\n            oldOffset.y + (y - oldOffset.y) * (1 - zoom)\r\n        );\r\n        this.state.scale = newScale;\r\n        this.state.offset = newOffset;\r\n    }\r\n\r\n    get mousePos() {\r\n        return this.events.lastMousePoint;\r\n    }\r\n\r\n    docToViewCoords(x: number, y: number) {\r\n        return new Vec2(\r\n            x * this.state.scale.x + this.state.offset.x,\r\n            y * this.state.scale.y + this.state.offset.y\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Renders the document to the canvas.\r\n     * Update document before calling this.\r\n     */\r\n    renderDoc() {\r\n        this.ctx.save();\r\n        this.ctx.translate(this.state.offset.x, this.state.offset.y);\r\n        this.ctx.scale(this.state.scale.x, this.state.scale.y);\r\n        // if scale is bigger than 1, don't use image smoothing\r\n        this.ctx.imageSmoothingEnabled = !this.scaleBiggerThan(1);\r\n        this.ctx.drawImage(this.doc.canvas, 0, 0);\r\n        this.ctx.restore();\r\n    }\r\n\r\n    scaleBiggerThan(n: number) {\r\n        return this.state.scale.x > n || this.state.scale.y > n;\r\n    }\r\n\r\n    renderBackground() {\r\n        this.ctx.save();\r\n        this.ctx.filter = \"blur(4px)\";\r\n        this.ctx.strokeStyle = \"black\";\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(\r\n            this.state.offset.x,\r\n            this.state.offset.y + 1,\r\n            this.doc.width * this.state.scale.x,\r\n            this.doc.height * this.state.scale.y + 1\r\n        );\r\n        this.ctx.restore();\r\n\r\n\r\n        this.ctx.save();\r\n        this.ctx.translate(this.state.offset.x, this.state.offset.y);\r\n        this.ctx.scale(this.state.scale.x, this.state.scale.y);\r\n        // if scale is bigger than 1, don't use image smoothing\r\n        this.ctx.imageSmoothingEnabled = !this.scaleBiggerThan(1)\r\n        if (this.background == nullLayer){\r\n            console.log(\"Background is null\");\r\n\r\n        }else{\r\n            this.ctx.drawImage(this.background.canvas, 0, 0);\r\n        }\r\n\r\n        this.ctx.restore();\r\n    }\r\n\r\n    renderForeground() {\r\n        if (this.scaleBiggerThan(9)) {\r\n            this.ctx.save();\r\n            // Draw a grid\r\n            this.ctx.strokeStyle = \"rgba(0,0,0,0.5)\";\r\n            this.ctx.lineWidth = 0.5;\r\n            let startingX = Math.max(\r\n                this.state.offset.x % this.state.scale.x,\r\n                this.state.offset.x\r\n            );\r\n            // if (startingX < 0) {\r\n            //     startingX = startingX % 1;\r\n            // }\r\n            let startingY = Math.max(\r\n                this.state.offset.y % this.state.scale.y,\r\n                this.state.offset.y\r\n            );\r\n            // if (startingY < 0) {\r\n            //     startingY = startingY % 1;\r\n            // }\r\n\r\n            let endX = (this.state.offset.x + this.doc.width * this.state.scale.x);\r\n            if (endX > this.width) {\r\n                endX = this.width;\r\n            }\r\n            let endY = (this.state.offset.y + this.doc.height * this.state.scale.y);\r\n            if (endY > this.height) {\r\n                endY = this.height;\r\n            }\r\n\r\n            for (let i = startingX; i < endX; i += this.state.scale.x) {\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(i, startingY);\r\n                this.ctx.lineTo(i, endY);\r\n                this.ctx.stroke();\r\n            }\r\n\r\n            for (let i = startingY; i < endY; i += this.state.scale.y) {\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(startingX, i);\r\n                this.ctx.lineTo(endX, i);\r\n                this.ctx.stroke();\r\n            }\r\n            this.ctx.restore();\r\n        }\r\n    }\r\n\r\n    //\r\n    // renderBorder() {\r\n    //\r\n    // }\r\n}\r\n\r\nclass TranslateState {\r\n    offset: Vec2 = new Vec2(0, 0);\r\n    scale: Vec2 = new Vec2(1, 1);\r\n}\r\n", "import ComboPaintDocument from \"./Document/ComboPaintDocument\";\r\nimport {DocViewer} from \"./DocViewer\";\r\nimport {PaintTool} from \"./PaintTools/PaintTool\";\r\nimport {CPLayer} from \"./Layers/CPLayer\";\r\nimport {NullLayer} from \"./Layers/NullLayer\";\r\nimport {BasicPen} from \"./PaintTools/BasicPen\";\r\n\r\nexport class GlobalValues {\r\n    static _currDoc: ComboPaintDocument;\r\n    static _allDocs: ComboPaintDocument[] = [];\r\n    static _allDocsSet: Set<ComboPaintDocument> = new Set<ComboPaintDocument>();\r\n    static _currTool: PaintTool;\r\n    static _viewer: DocViewer;\r\n\r\n    static get currDoc() {\r\n        return GlobalValues._currDoc;\r\n    }\r\n\r\n    static set currDoc(doc: ComboPaintDocument) {\r\n        GlobalValues._currDoc = doc;\r\n        GlobalValues.viewer.viewDoc(doc);\r\n\r\n        if (!this.allDocsSet.has(doc)) {\r\n            this.addDoc(doc);\r\n        }\r\n    }\r\n\r\n    static addDoc(doc: ComboPaintDocument) {\r\n        GlobalValues.allDocs.push(doc);\r\n        GlobalValues.allDocsSet.add(doc);\r\n    }\r\n\r\n    static removeDoc(doc: ComboPaintDocument) {\r\n        if (!this.allDocsSet.has(doc)) {\r\n            console.log(\"Doc not found\");\r\n            return;\r\n        }\r\n        // remove from array\r\n        let index = GlobalValues.allDocs.indexOf(doc);\r\n        if (index !== -1) {\r\n            GlobalValues.allDocs.splice(index, 1);\r\n        }\r\n\r\n        // remove from set\r\n        GlobalValues.allDocsSet.delete(doc);\r\n\r\n        // remove from currDoc\r\n        if (GlobalValues.currDoc === doc) {\r\n            if (GlobalValues.allDocs.length > 0) {\r\n                GlobalValues.currDoc = GlobalValues.allDocs[0];\r\n            }\r\n        }\r\n    }\r\n\r\n    static get allDocsSet() {\r\n        return GlobalValues._allDocsSet;\r\n    }\r\n\r\n\r\n    static get allDocs() {\r\n        return GlobalValues._allDocs;\r\n    }\r\n\r\n    static get currTool() {\r\n        return GlobalValues._currTool;\r\n    }\r\n\r\n    static set currTool(tool: PaintTool) {\r\n        GlobalValues._currTool = tool;\r\n        tool.eventHandler = this.viewer.paintToolEventHandler;\r\n    }\r\n\r\n    static get viewer() {\r\n        return GlobalValues._viewer;\r\n    }\r\n\r\n    static set viewer(viewer: DocViewer) {\r\n        GlobalValues._viewer = viewer;\r\n    }\r\n\r\n    static get currLayer() {\r\n        if (GlobalValues.currDoc.selectedLayer === null) {\r\n            console.log(\"No layer selected\");\r\n            return NullLayer.getInstance();\r\n            // throw new Error(\"Layer not set\");\r\n        }\r\n        return GlobalValues.currDoc.selectedLayer;\r\n    }\r\n\r\n    static set currLayer(layer: CPLayer) {\r\n        GlobalValues.currDoc.selectedLayer = layer;\r\n    }\r\n\r\n    static init(canvas: HTMLCanvasElement, doc: ComboPaintDocument | null = null, tool: PaintTool | null = null) {\r\n        if (doc === null) {\r\n            doc = new ComboPaintDocument(\r\n                [3200, 1800],\r\n                [new CPLayer(3200, 1800, \"Layer 1\").fill(\"#ffffff\")]\r\n            );\r\n        }\r\n        if (tool === null) {\r\n            tool = new BasicPen();\r\n        }\r\n\r\n        GlobalValues.viewer = new DocViewer(canvas);\r\n\r\n        GlobalValues.currDoc = doc;\r\n        if (this.currDoc.selectedLayer !== null) {\r\n            this.currLayer = this.currDoc.selectedLayer;\r\n        }\r\n\r\n        GlobalValues.allDocs.push(doc);\r\n        GlobalValues.currTool = tool;\r\n\r\n        this.currDoc.render();\r\n        this.viewer.render();\r\n    }\r\n}\r\n", "import {PaintToolEventHandler} from \"../Events/PaintToolEventHandler\";\r\nimport {PointerPoint} from \"../Events/PointerEventHandler\";\r\nimport {CPLayer} from \"../Layers/CPLayer\";\r\nimport ComboPaintDocument from \"../Document/ComboPaintDocument\";\r\nimport {DocViewer} from \"../DocViewer\";\r\nimport {GlobalValues} from \"../GlobalValues\";\r\n\r\nexport class PaintTool {\r\n    name: string;\r\n    _eventHandler: PaintToolEventHandler | null = null;\r\n\r\n    // setLayer(layer: CPLayer) {\r\n    //     console.debug(\"Setting layer to \" + layer.name);\r\n    //     this._layer = layer;\r\n    // }\r\n\r\n    get layer() {\r\n        // if (this._layer === null) {\r\n        //     throw new Error(\"Layer not set\");\r\n        // }\r\n        // return this._layer;\r\n        if (GlobalValues.currDoc.selectedLayer === null) {\r\n            throw new Error(\"Layer not set\");\r\n        }\r\n\r\n        return GlobalValues.currDoc.selectedLayer;\r\n    }\r\n\r\n    get eventHandler() {\r\n        if (this._eventHandler === null) {\r\n            throw new Error(\"Event handler not set\");\r\n        }\r\n        return this._eventHandler;\r\n    }\r\n\r\n    set eventHandler(eventHandler: PaintToolEventHandler) {\r\n        console.log(\"Setting event handler\");\r\n        this._eventHandler = eventHandler;\r\n        this._eventHandler.bind(this);\r\n    }\r\n\r\n    get canvas() {\r\n        if (this.layer === null) {\r\n            throw new Error(\"Layer not set\");\r\n        }\r\n        return this.layer.canvas;\r\n    }\r\n\r\n    get doc() {\r\n        return GlobalValues.currDoc;\r\n    }\r\n\r\n    get viewer() {\r\n        return GlobalValues.viewer;\r\n    }\r\n\r\n    constructor(eventHandler: PaintToolEventHandler | null = null, name: string | null = null) {\r\n        if (name === null) {\r\n            name = this.constructor.name;\r\n        }\r\n        this.name = name;\r\n    }\r\n\r\n    onDown(point: PointerPoint) {\r\n        console.log(\"Down\");\r\n    }\r\n\r\n    onUp(point: PointerPoint) {\r\n        console.log(\"Up\");\r\n    }\r\n\r\n    onPressedMove(point: PointerPoint) {\r\n        console.log(\"PressedMove\");\r\n    }\r\n\r\n    onMove(point: PointerPoint) {\r\n        console.log(\"Move\");\r\n    }\r\n\r\n    commitChanges() {\r\n        this.doc.render();\r\n        this.viewer.render();\r\n    }\r\n}\r\n", "import {CPLayer} from \"../Layers/CPLayer\";\r\nimport {PointerEventHandler, PointerPoint} from \"../Events/PointerEventHandler\";\r\nimport {PaintToolEventHandler} from \"../Events/PaintToolEventHandler\";\r\nimport {PaintTool} from \"./PaintTool\";\r\n\r\nexport class PaintTool2D extends PaintTool {\r\n\r\n\r\n    get ctx() {\r\n        if (this.layer === null) {\r\n            throw new Error(\"Layer not set\");\r\n        }\r\n        return this.layer.ctx;\r\n    }\r\n\r\n    setFillStyle(style: string) {\r\n        this.ctx.fillStyle = style;\r\n    }\r\n\r\n    setFillRGB(r: number, g: number, b: number) {\r\n        this.setFillStyle(`rgb(${r}, ${g}, ${b})`);\r\n    }\r\n\r\n    drawLine(x1: number, y1: number, x2: number, y2: number) {\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x1, y1);\r\n        this.ctx.lineTo(x2, y2);\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    drawLineFromPoint(p1: PointerPoint, p2: PointerPoint) {\r\n        this.drawLine(p1.x, p1.y, p2.x, p2.y);\r\n    }\r\n\r\n    drawCircle(x: number, y: number, radius: number) {\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, radius, 0, 2 * Math.PI);\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    commitChanges() {\r\n        super.commitChanges();\r\n        this.viewer.render();\r\n    }\r\n}\r\n", "import {PaintTool2D} from \"./PaintTool2D\";\r\nimport {PointerPoint} from \"../Events/PointerEventHandler\";\r\n\r\nexport class BasicPen extends PaintTool2D {\r\n\r\n    onPressedMove(point: PointerPoint) {\r\n        super.onPressedMove(point);\r\n        let lastPoint = this.eventHandler.lastPoint;\r\n\r\n        if (lastPoint !== null) {\r\n            // console.log(\"Drawing line from \" + lastPoint.x + \", \" + lastPoint.y + \" to \" + point.x + \", \" + point.y);\r\n            this.setFillRGB(0, 0, 0);\r\n            this.drawLine(lastPoint.x, lastPoint.y, point.x, point.y);\r\n            this.commitChanges();\r\n        }\r\n    }\r\n}\r\n", "import {DocViewer} from \"./DocViewer\";\r\nimport ComboPaintDocument from \"./Document/ComboPaintDocument\";\r\nimport {CPLayer} from \"./Layers/CPLayer\";\r\nimport {PointerEventHandler} from \"./Events/PointerEventHandler\";\r\nimport {BasicPen} from \"./PaintTools/BasicPen\";\r\nimport {PaintToolEventHandler} from \"./Events/PaintToolEventHandler\";\r\nimport {DocExporter} from \"./Utils/DocExporter\";\r\nimport {addBtnToDom} from \"./Utils/DomCreator\";\r\nimport {addToConsole, downloadUrl} from \"./Utils/Utils\";\r\nimport {Preference} from \"./Preference\";\r\nimport {GlobalValues} from \"./GlobalValues\";\r\n\r\n\r\nfunction main() {\r\n    let viewCanvas = document.getElementById(\"viewCanvas\") as HTMLCanvasElement;\r\n    viewCanvas.width = 800;\r\n    viewCanvas.height = 600;\r\n    let width = 3200;\r\n    let height = 1800;\r\n    // let layer0 = new BackgroundLayer(width, height, \"checkerboard\");\r\n    let layer1 = new CPLayer(width, height, \"Layer 1\");\r\n    let layer2 = new CPLayer(width, height, \"red\");\r\n    layer2.ctx.fillStyle = \"red\";\r\n    layer2.ctx.fillRect(0, 0, width / 2, 10);\r\n    layer2.opacity = 0.2;\r\n\r\n    if (viewCanvas === null) {\r\n        throw new Error(\"viewCanvas is null\");\r\n    }\r\n\r\n    GlobalValues.init(\r\n        viewCanvas,\r\n        new ComboPaintDocument(\r\n            [width, height],\r\n            [layer1, layer2]\r\n        ),\r\n        new BasicPen()\r\n    );\r\n\r\n    // console.debug(\"Creating document\");\r\n    // console.debug(\"Adding layers\");\r\n    //\r\n    // let paintToolEventHandler = new PaintToolEventHandler();\r\n    // PointerEventHandler.bindWithElement(paintToolEventHandler, viewCanvas);\r\n    //\r\n    // let pen = new BasicPen();\r\n    //\r\n    // pen.setLayer(layer1);\r\n    //\r\n    // let doc = new ComboPaintDocument(width, height);\r\n    //\r\n    // // doc.addLayer(layer0);\r\n    // doc.addLayer(layer1);\r\n    // doc.addLayer(layer2);\r\n    // doc.render();\r\n    //\r\n    // let docViewer = new DocViewer(viewCanvas, doc);\r\n    //\r\n    // pen.doc = doc;\r\n    // pen.viewer = docViewer;\r\n    //\r\n    // pen.eventHandler = docViewer.paintToolEventHandler;\r\n    //\r\n    // docViewer.render();\r\n    //\r\n    // addBtnToDom(\"export to png\", \"test\", () => {\r\n    //     let url = DocExporter.docToPNG(doc);\r\n    //     downloadUrl(url, \"test.png\");\r\n    // });\r\n    //\r\n    // addBtnToDom(\"export to psd\", \"test\", () => {\r\n    //     let url = DocExporter.docToPSD(doc);\r\n    //     downloadUrl(url, \"test.psd\");\r\n    //\r\n    // });\r\n    //\r\n    // addToConsole(\"save.png\", () => {\r\n    //     let url = DocExporter.docToPNG(doc);\r\n    //     downloadUrl(url, \"test.png\");\r\n    // });\r\n    //\r\n    // addToConsole(\"preferences\", Preference);\r\n    //\r\n    // addToConsole(\"localStorage\", localStorage);\r\n}\r\n\r\nmain();\r\nconsole.log(\"Main.ts loaded\");\r\n"],
  "mappings": "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",
  "names": []
}
